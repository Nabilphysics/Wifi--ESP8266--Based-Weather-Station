
// Metropolitan University,Sylhet,Bangladesh
// www.metrouni.edu.bd
// Weather Station
// Department of EEE
// Syed Razwanul Haque & Robi Kormokar
//www.fb.com/Nabilphysics
https://github.com/Nabilphysics/Wifi--ESP8266--Based-Weather-Station
#include <SoftwareSerial.h>
#include <AirQuality.h>
#include"Arduino.h"
#include "DHT.h"   //Humidity & Temp Sensor 
////////////////////ESP8266 Wifi Module Connection////////////////////
/*------------------------ 
- 3.3V 3.3V 3.3V  D3 
- D4   NC    NC   GND
-
-  
-
- --------|
-   |--|  |
- --|  |--|Antenna Side 
--------------------------
*/
#define RX 3  
#define TX 4
SoftwareSerial wifi(RX, TX);

////////////////////Connection & Data Indicator LED///////////////////
#define RedLed 12
#define GreenLED 13

AirQuality airqualitysensor;
int current_quality =-1;
////////////////////Temp&Humidity Sensor Connection//////////////////
#define DHTPIN 7     
#define DHTTYPE DHT11   // DHT 11 if DHT22 or DHT21 Please Replace
DHT dht(DHTPIN, DHTTYPE);
////////////////////Variables/////////////////////////////////////////
int uv_sensorValue,uv_index;
float h,t;

bool WifiConnection = false;
String WifiPass = "AT+CWJAP=\"MU-778\",\"12234556\"";       //Wifi SSID & Password

void setup() 
{
    Serial.begin(9600); 
    wifi.begin(9600);
    pinMode(RedLed, OUTPUT);
    pinMode(GreenLED, OUTPUT);
    digitalWrite(RedLed,HIGH);
    Serial.println("DHTxx test!");
    dht.begin();
    airqualitysensor.init(14);
    
}

void loop() 
{
   if(WifiConnection == false){  
      WifiConnect(); 
   }
   else {
     uv(); // UV Sensor Reading
     TempHumidity();    // Temperature & Humidity Sensor Reading
     AirQualityRead();  // AirQuality Sensor Reading
     throwData();       // Send Sensor Data to Internet
     GreenLedPattern();
    }
}

///////////////////////////////// ISR /////////////////////////////////////////////////
ISR(TIMER2_OVF_vect)
{
  if(airqualitysensor.counter==122)//set 2 seconds as a detected duty
  {
      airqualitysensor.last_vol=airqualitysensor.first_vol;
      airqualitysensor.first_vol=analogRead(A1);
      airqualitysensor.counter=0;
      airqualitysensor.timer_index=1;
      PORTB=PORTB^0x20;
  }
  else
  {
    airqualitysensor.counter++;
  }
}
//////////////////////////////////UV Sensor Reading///////////////////////////////////////
int uv(){
   uv_sensorValue= analogRead(A0);
    
   if(uv_sensorValue<10)
      (uv_index = 0);
   else if(uv_sensorValue<47 && uv_sensorValue>9) 
      (uv_index = 1);
   else if(uv_sensorValue<66 && uv_sensorValue>46) 
      (uv_index = 2);
   else if(uv_sensorValue<84 && uv_sensorValue>65) 
      (uv_index = 3);
   else if(uv_sensorValue<104 && uv_sensorValue>83) 
      (uv_index = 4);
   else if(uv_sensorValue<125 && uv_sensorValue>103) 
      (uv_index = 5);
   else if(uv_sensorValue<143 && uv_sensorValue>124) 
      (uv_index = 6);
   else if(uv_sensorValue<163 && uv_sensorValue>142) 
      (uv_index = 7);
   else if(uv_sensorValue<181 && uv_sensorValue>162) 
      (uv_index = 8);
   else if(uv_sensorValue<201 && uv_sensorValue>180) 
      (uv_index = 9);
   else if(uv_sensorValue<222 && uv_sensorValue>200) 
      (uv_index = 10);
   else if(uv_sensorValue>221) 
      (uv_index = 11);
      
  //Serial.print("UV= ");
  //Serial.print(u);
  Serial.print("UV Index=");
  Serial.println(uv_index);
}
/////////////////////////////////Temperature and Humidity Sensor Reading///////////////////////////////////
 float TempHumidity(){
     h = dht.readHumidity();
     t = dht.readTemperature();
     
     if (isnan(t) || isnan(h)) // check if returns are valid, if they are NaN (not a number) then something went wrong!
    {
        Serial.println("Failed to read from DHT");
    } 
    else 
    {
        Serial.print("Humidity: "); 
        Serial.print(h);
        Serial.print(" %\t");
        Serial.print("Temperature: "); 
        Serial.print(t);
        Serial.println(" *C");
    }
 }   

/////////////////////////////////Air Quality Sensor Read///////////////////////////////////////////// 
 int AirQualityRead(){
    current_quality=airqualitysensor.slope();
    Serial.print("Air Q Value=");
    Serial.println(current_quality);
    if (current_quality >= 0)// if a valid data returned.
    {
        if (current_quality==0)
            Serial.println("High pollution! Force signal active");
        else if (current_quality==1)
            Serial.println("High pollution!");
        else if (current_quality==2)
            Serial.println("Low pollution!");
        else if (current_quality ==3)
            Serial.println("Fresh air");
    }
}
////////////////////////////////////////Data Sending//////////////////////////////////////////////////
void throwData(){
   
   String field1 = "GET /update?key=OYH101OZ0yyR67UF&field1=";  //Write Format https://api.thingspeak.com/update?key=OYH101OZ0ttR67UF&field1=1&field2=2field3=2&field4=4
   String field2 = "&field2="; //Humidity
   String field3 = "&field3="; //Temperature
   String field4 = "&field4="; //AirQuality
   String dataPacket = field1 + uv_index + field2 + h + field3 + t+ field4 + current_quality ; //Combination of four Sensor Data
   wifi.print("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n"); //IP for www.thinkspeak.com ; 80 Port
   delay(2000);
   wifi.print("AT+CIPSEND=");
   wifi.println(dataPacket.length()+2); //+2 for \r\n which will be added 
   delay(100);
   wifi.print(dataPacket);
   wifi.print("\r\n");
   Serial.println(dataPacket); //
   delay(5000);
   dataPacket = "GET /update?key=OYH101OtthR67UF&field1=";  // Reset
   }
/////////////////////////////Data Sending End /////////////////////////////////////////////////    
    
///////////////////////////// Wifi Connection Establish ///////////////////////////////////////
//http://www.pridopia.co.uk/pi-doc/ESP8266ATCommandsSet.pdf Please Check for Details
 void WifiConnect(){
    wifi.print("AT+RST\r\n"); //WIfi Module Restart
    delay(2000);
    wifi.print("AT+CWMODE=1\r\n"); //Wifi Mode STA
    delay(1000);
    if(wifi.find("OK")) {
       Serial.println("WIFI module is initialized");
           }
      else {
       Serial.println("ERROR Occurred");
           }
    wifi.print("AT+CIPMUX=0\r\n"); //TCP/UDP Multiple
    delay(200);
    wifi.print(WifiPass);
    wifi.print("\r\n");
    delay(10000);
    if(wifi.find("OK")) {
    Serial.println("Connected");
    WifiConnection = true;
    digitalWrite(GreenLED, HIGH);
    digitalWrite(RedLed, LOW);
  }
  else {
    Serial.println("The WIFI router is not reachable.");
    WifiConnection = false;
    digitalWrite(RedLed, HIGH);
    digitalWrite(GreenLED, LOW);
    
  }
 }  
 //////////////////////////////Wifi Connection(Function) End /////////////////////////////////////////////////////////////////////
 
 //////////////////////////////Green LED Pattern(Data Sending Successful) ////////////////////////////////////////////////////////
 void GreenLedPattern(){
    digitalWrite(GreenLED, HIGH);
    delay(200);
    for (int i=0;i<5;i++){
    digitalWrite(GreenLED, LOW); 
    delay(100);
    digitalWrite(GreenLED, HIGH);
    delay(100);
    }
    digitalWrite(GreenLED, HIGH);
    delay(100);
 }
